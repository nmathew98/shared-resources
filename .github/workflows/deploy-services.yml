name: Deploy services

on:
  push:
    branches: [master, staging, dev]
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.base_ref || github.ref_name }}

jobs:
  up:
    if: contains(vars.UP, github.base_ref || github.ref_name)
    permissions:
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        compute: [authnz, rollout, infrastructure, telemetry]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Configure GCP credentials
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: "Install dependencies: ${{ matrix.compute }}"
        run: go mod download
        working-directory: ${{ matrix.compute }}

      - name: "Deploy stack: skulpture/shared-${{ matrix.compute }}"
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: "skulpture/shared-${{ matrix.compute }}"
          comment-on-pr: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          work-dir: ${{ matrix.compute }}
          upsert: true
          suppress-outputs: true
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          COMPUTE_INSTANCE_NAME: shared-${{ matrix.compute }}
          # COMPUTE_INSTANCE_NAME: shared-${{ matrix.compute }}-${{ env.BRANCH_NAME }}
          GOOGLE_PROJECT: ${{ vars.GCP_PROJECT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ vars.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          GOOGLE_SERVICE_ACCOUNT: ${{ vars.GOOGLE_SERVICE_ACCOUNT }}
          GCP_SSH_PUBLIC_KEY: ${{ vars.GCP_SSH_PUBLIC_KEY }}

  build:
    if: ${{ always() }}
    needs: up
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Build and push Docker image: authnz"
        uses: docker/build-push-action@v5
        env:
          TAG: ${{ (env.BRANCH_NAME == 'master' && 'latest') || env.BRANCH_NAME }}
        with:
          context: "{{defaultContext}}:authnz/keycloak"
          push: true
          build-args: |
            KEYCLOAK_VERSION=${{ vars.KEYCLOAK_VERSION }}
            KEYCLOAK_DB=${{ vars.KEYCLOAK_DB }}
            KEYCLOAK_FEATURES=persistent-user-sessions
            KEYCLOAK_CACHE=ispn
            KEYCLOAK_CACHE_STACK=kubernetes
          tags: |
            skulpture/authnz:${{ env.TAG }}

      - name: "Build and push Docker image: elasticsearch"
        uses: docker/build-push-action@v5
        env:
          TAG: ${{ (env.BRANCH_NAME == 'master' && 'latest') || env.BRANCH_NAME }}
        with:
          context: "{{defaultContext}}:telemetry/elasticsearch"
          push: true
          build-args: |
            ELK_VERSION=${{ vars.ELK_VERSION }}
          tags: |
            skulpture/elasticsearch:${{ env.TAG }}

      - name: "Build and push Docker image: kibana"
        uses: docker/build-push-action@v5
        env:
          TAG: ${{ (env.BRANCH_NAME == 'master' && 'latest') || env.BRANCH_NAME }}
        with:
          context: "{{defaultContext}}:telemetry/kibana"
          push: true
          build-args: |
            ELK_VERSION=${{ vars.ELK_VERSION }}
          tags: |
            skulpture/kibana:${{ env.TAG }}

      - name: "Build and push Docker image: apm-server"
        uses: docker/build-push-action@v5
        env:
          TAG: ${{ (env.BRANCH_NAME == 'master' && 'latest') || env.BRANCH_NAME }}
        with:
          context: "{{defaultContext}}:telemetry/apm-server"
          push: true
          build-args: |
            ELK_VERSION=${{ vars.ELK_VERSION }}
          tags: |
            skulpture/apm-server:${{ env.TAG }}

      - name: "Build and push Docker image: kryptos"
        uses: docker/build-push-action@v5
        env:
          TAG: ${{ (env.BRANCH_NAME == 'master' && 'latest') || env.BRANCH_NAME }}
        with:
          context: "{{defaultContext}}:kryptos"
          push: true
          tags: |
            skulpture/kryptos:${{ env.TAG }}

  deploy:    
    permissions:
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        service: [authnz, rollout, telemetry]
        branch: [master] # staging, dev

    environment: "${{ matrix.service }}-${{ matrix.branch }}"

    needs: build
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy files to GCP (${{ matrix.branch }})
        uses: appleboy/scp-action@master
        # if: env.BRANCH_NAME == matrix.branch
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.GCP_SSH_PASSPHRASE }}
          port: 22
          overwrite: true
          source: "./*"
          target: "./shared-resources-${{ env.BRANCH_NAME }}"

      - name: Deploy ${{ matrix.service }} (${{ matrix.branch }})
        uses: appleboy/ssh-action@master
        if: contains(vars.DEPLOY, env.BRANCH_NAME)
        env:
          STACK_NAME: ${{ matrix.service }}
          SERVICES_DOCKER_COMPOSE_FILE: docker-compose.yml
          LOGS_DOCKER_COMPOSE_FILE: docker-compose.logs.yml
          PROXY_DOCKER_COMPOSE_FILE: docker-compose.proxy.yml
          ENV_FILE: ~/.env
          KRYPTOS: skulpture/kryptos:${{ (env.BRANCH_NAME == 'master' && 'latest') || env.BRANCH_NAME }}
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.GCP_SSH_PASSPHRASE }}
          port: 22
          script: |
            sudo su

            # TODO: before, updated env wasn't being applied when just updating a stack like this
            # TODO: if we refer to a node specifically by ip, there are issues with nginx not being able
            # to resolve the hostname because it caches
            docker stack rm ${{ env.STACK_NAME }}
            docker container prune -f

            sleep 30s

            docker pull ${{ env.KRYPTOS }}
            export $(docker run --rm --env-file ${{ env.ENV_FILE }} ${{ env.KRYPTOS }} cat | xargs)
            
            if [[ "${{ env.BRANCH_NAME }}" != "master" ]]; then
              export TAG=${{ env.BRANCH_NAME }}
            fi

            cd shared-resources-${{ env.BRANCH_NAME }}/${{ matrix.service }}

            docker stack deploy --compose-file ${{ env.SERVICES_DOCKER_COMPOSE_FILE }} ${{ env.STACK_NAME }}
            sleep 30s
            docker stack deploy --compose-file ${{ env.LOGS_DOCKER_COMPOSE_FILE }} ${{ env.STACK_NAME }}
            sleep 30s
            docker stack deploy --compose-file ${{ env.PROXY_DOCKER_COMPOSE_FILE }} ${{ env.STACK_NAME }}
